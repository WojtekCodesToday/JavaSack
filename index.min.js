import*as fs from"fs/promises";let cmdWrap=(t,a)=>`${t} ${a}\n`;const javasack={cmd:{Say:(...t)=>cmdWrap("say",t.join("")),Tellraw:(t,...a)=>cmdWrap("tellraw",[t,...a]),Data:(t,...a)=>cmdWrap("data",[t,...a]),RawCommand:(...t)=>t.join(" ")},Selector(t,...a){if(!a||0===a.length)return`@${t} `;const i=a.map(([t,a])=>`${t}=${a}`).join(",");return`@${t}[${i}] `},NBT:(t,a={quote:!1})=>a.quote?`{${Object.entries(t).map(([t,a])=>`"${t}":${a}`).join(",")}} `:`{${Object.entries(t).map(([t,a])=>`${t}:${a}`).join(",")}} `,Datapack:class{constructor(t,a,i){if("string"!=typeof t)throw new Error("Datapack m is not a string!");if("number"!=typeof a)throw new Error("Pack format is not a number!");if("string"!=typeof i)throw new Error("Datapack description is not a string!");this.name=t.toLowerCase(),this.format=a,this.description=i,this.c=[],this.n=[]}addFunction(t,a){this.n.push(t),this.c.push(a)}async generate(){try{console.log("Creating folder structure...");try{await fs.mkdir(`${this.name}/data/minecraft/tags/functions`,{recursive:!0}),await fs.mkdir(`${this.name}/data/${this.name}/functions`,{recursive:!0})}catch(t){console.log({err:t})}console.log("Creating mcmeta file..."),await fs.writeFile(`${this.name}/pack.mcmeta`,`{"pack":{"pack_format":${this.format},"description":"${this.description}"}}`);for(let t=0;t<this.c.length;t++)this.c[t]=this.c[t].replace("  "," "),console.log("Writing file "+this.n[t]+` to ${this.name}/data/${this.name}/functions/${this.n[t]}.mcfunction`),await fs.writeFile(this.name+`/data/${this.name}/functions/${this.n[t]}.mcfunction`,this.c[t]),await fs.writeFile(this.name+`/data/minecraft/tags/functions/${this.n[t]}.json`,`{"values": ["${this.name}:${this.n[t]}"]}`);console.log(`Datapack ${this.name} generated successfully!`)}catch(t){console.error("Error generating datapack:",t)}}}};export default javasack;